version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: intelliflow-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: intelliflow
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: intelliflow_password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - intelliflow-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d intelliflow"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: intelliflow-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass intelliflow_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - intelliflow-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Ollama LLM Service
  ollama:
    image: ollama/ollama:latest
    container_name: intelliflow-ollama
    restart: unless-stopped
    volumes:
      - ollama_data:/root/.ollama
      - ./models:/models
    ports:
      - "11434:11434"
    networks:
      - intelliflow-network
    environment:
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_HOST=0.0.0.0:11434
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: intelliflow-backend
    restart: unless-stopped
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql://postgres:intelliflow_password@postgres:5432/intelliflow
      - REDIS_URL=redis://:intelliflow_redis_password@redis:6379
      
      # LLM Configuration
      - OLLAMA_BASE_URL=http://ollama:11434
      - LLAMA_MODEL=llama3.1
      
      # API Configuration
      - API_TITLE=IntelliFlow API
      - API_VERSION=1.0.0
      - SECRET_KEY=your-super-secret-key-here-change-in-production
      - ACCESS_TOKEN_EXPIRE_MINUTES=1440
      
      # Service Configuration
      - LANGSMITH_API_KEY=${LANGSMITH_API_KEY:-}
      - LANGSMITH_PROJECT=intelliflow
      - MCP_SERVER_URL=${MCP_SERVER_URL:-}
      
      # Environment
      - ENVIRONMENT=production
      - DEBUG=false
      
      # CORS
      - ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000,http://frontend:3000
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - intelliflow-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: intelliflow-frontend
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000/ws
      - NODE_ENV=production
    ports:
      - "3000:3000"
    networks:
      - intelliflow-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: intelliflow-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/ssl/certs
    ports:
      - "80:80"
      - "443:443"
    networks:
      - intelliflow-network
    depends_on:
      - backend
      - frontend
    profiles:
      - production

  # Monitoring Stack (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: intelliflow-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - intelliflow-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: intelliflow-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3001:3000"
    networks:
      - intelliflow-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

# Networks
networks:
  intelliflow-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Development override
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up